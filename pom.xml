<?xml version="1.0" encoding="UTF-8"?>

<!--
 *
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 *
-->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.xpn.xwiki.platform</groupId>
    <artifactId>xwiki-core-parent</artifactId>
    <version>1.4-SNAPSHOT</version>
  </parent>
  <artifactId>xwiki-core</artifactId>
  <name>XWiki Platform - Core - Core</name>
  <packaging>jar</packaging>
  <description>XWiki Platform - Core - Core</description>
  <dependencies>

    <!-- Dependencies that we need to fix so that we don't need to have them in our custom remote repository -->

    <!-- Exo POMs seems to have a problem. See http://jira.exoplatform.org/browse/PLT-24. When this is resolved,
         get the Exo JARS from the ObjectWeb remote repo (or from the central repository when ObjectWeb
         is synced to there. -->
    <dependency>
      <groupId>exo-platform</groupId>
      <artifactId>exo-platform.container</artifactId>
      <version>2.0</version>
    </dependency>
    <dependency>
      <groupId>exo-platform</groupId>
      <artifactId>exo-platform.commons</artifactId>
      <version>2.0</version>
    </dependency>
    <dependency>
      <groupId>exo-platform</groupId>
      <artifactId>exo-platform.service.organization.api</artifactId>
      <version>2.0</version>
    </dependency>
    <dependency>
      <groupId>exo-platform</groupId>
      <artifactId>exo-platform.service.security.api</artifactId>
      <version>2.0</version>
    </dependency>
    <dependency>
      <groupId>exo-platform</groupId>
      <artifactId>exo-platform.service.database.api</artifactId>
      <version>2.0</version>
    </dependency>
    <dependency>
      <groupId>exo-platform</groupId>
      <artifactId>exo-platform.service.database.api</artifactId>
      <version>2.0</version>
    </dependency>

    <!-- The JRCS JARS are are in our repo till we get them published on the central repository and till
         we haven't succeeded in haviong suigeneric.org apply our patches.
         JRCS home page: http://www.suigeneris.org/kb/display/jrcs/JRCS+Home -->
    <dependency>
      <groupId>org.suigeneris</groupId>
      <artifactId>jrcs.diff</artifactId>
      <version>0.4.2</version>
    </dependency>
    <dependency>
      <groupId>org.suigeneris</groupId>
      <artifactId>jrcs.rcs</artifactId>
      <version>0.4.2</version>
    </dependency>

    <!-- Version 2.3.2 of oscache needs to be uploaded to central repository and XWiki's patch to be applied
         before we can remove this jar from our repo -->
    <dependency>
      <groupId>opensymphony</groupId>
      <artifactId>oscache</artifactId>
      <version>2.3.2</version>
      <classifier>xwiki</classifier>
    </dependency>

    <!-- Version 1.1 of jackrabbit core needs to be uploaded to central repository. In addition there was a  POM
         issue in version 1.0.1, see http://jira.codehaus.org/browse/MEV-453 -->
    <dependency>
      <groupId>org.apache.jackrabbit</groupId>
      <artifactId>jackrabbit-core</artifactId>
      <version>1.1</version>
    </dependency>

    <!-- We need to find what version of the googleapi we're using and get that to the central repository if the
         license allows it -->
    <dependency>
      <groupId>com.google</groupId>
      <artifactId>googleapi</artifactId>
      <version>UNKNOWN</version>
      <classifier>xwiki</classifier>
    </dependency>

    <!-- There's no release of Graffito yet (http://incubator.apache.org/graffito/jcr-mapping/index.html) -->
    <dependency>
      <groupId>org.apache.portals</groupId>
      <artifactId>graffito-jcr-mapping</artifactId>
      <version>1.0-a1-amelentev-dev</version>
    </dependency>

    <!-- VMA: I'm not sure if we have the right to distribute this jar. It's not on the central repository because
         of licensing issues. -->
    <dependency>
      <groupId>javax.transaction</groupId>
      <artifactId>jta</artifactId>
      <version>1.0.1B</version>
    </dependency>

    <!-- Flickrj (http://flickrj.sourceforge.net/). To be uploaded on the central repository -->
    <dependency>
      <groupId>flickrj</groupId>
      <artifactId>flickrapi</artifactId>
      <version>1.0a7</version>
    </dependency>

    <!-- There's only a 2.2.9.1 version of jgroups on the central repository
         (http://repo1.maven.org/maven2/jgroups/jgroups-all/). Upload a newer version
         (http://sourceforge.net/project/showfiles.php?group_id=6081&package_id=94868). -->
    <dependency>
      <groupId>jgroups</groupId>
      <artifactId>jgroups</artifactId>
      <version>2.2.9.3</version>
    </dependency>

    <!-- We need to upload rome-fetcher-0.7 to the central repository -->
    <dependency>
      <groupId>rome</groupId>
      <artifactId>rome-fetcher</artifactId>
      <version>0.7</version>
    </dependency>

    <!-- We need to get JCaptcha to upload its jar to the central repository.
         See http://forge.octo.com/jcaptcha/jira/browse/FWK-65 -->
    <dependency>
      <groupId>jcaptcha</groupId>
      <artifactId>jcaptcha-all</artifactId>
      <version>1.0-RC3</version>
    </dependency>

    <!-- We need to figure out what version we're using. I think this ldap JAR comes from
         http://developer.novell.com/wiki/index.php/Jldap. Then we need to check the license and see if we can
         upload it to the central repository. -->
    <dependency>
      <groupId>com.novell</groupId>
      <artifactId>ldap</artifactId>
      <version>UNKNOWN</version>
    </dependency>

    <!-- Version 1.0.0-rc1 has some bad dependencies in the POM. This is fixed in 1.0.0 but unfortunately we're
         using an API (setDataAreaRatio()) that has disappeared in 1.0.0 so we need to fix this before we can
         move to 1.0.0 or beyond... See http://jira.xwiki.org/jira/browse/XWIKI-390.
         Note: when we move to using the central repo version we'll only need 1 dependency on jfreechart -->
    <dependency>
      <groupId>jfree</groupId>
      <artifactId>jfreechart</artifactId>
      <version>1.0.0-rc1</version>
    </dependency>
    <dependency>
      <groupId>jfree</groupId>
      <artifactId>jcommon</artifactId>
      <version>1.0.5</version>
    </dependency>

    <!-- See http://jira.codehaus.org/browse/MEV-488 -->
    <dependency>
      <groupId>javax.jcr</groupId>
      <artifactId>jcr</artifactId>
      <version>1.0</version>
    </dependency>

    <!-- We need to ask to upload Velocity Tools 1.3 to the central repo -->
    <dependency>
      <groupId>velocity-tools</groupId>
      <artifactId>velocity-tools</artifactId>
      <version>1.3</version>
    </dependency>

    <!-- We need to create a JIRA issue on the Maven project to upload these artifacts -->
    <dependency>
      <groupId>info.informatica</groupId>
      <artifactId>css4j</artifactId>
      <version>0.4.0</version>
    </dependency>
    <!-- TODO: Check if this dependency is really required at runtime -->
    <dependency>
      <groupId>info.informatica</groupId>
      <artifactId>jclf</artifactId>
      <version>2.3.0</version>
      <scope>runtime</scope>
    </dependency>

    <!-- JTidy hasn't been released for ages (since 2001). A snapshot version exists at
         http://jtidy.sourceforge.net/snapshots/ but Maven requires non-snapshots in order to
         allow a release (this is for reproducibility). Thus we've had to upload JTidy into
         our custom repository -->
    <dependency>
      <groupId>jtidy</groupId>
      <artifactId>jtidy</artifactId>
      <version>8.0-20060801.131059-3-dev</version>
      <exclusions>
        <exclusion>
          <groupId>xerces</groupId>
          <artifactId>dom3-xml-apis</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    
    <!-- Required by the XML-RPC implementation and tests.
         Hopefully they will eventually make it into a swizzle release. -->
    <dependency>
      <groupId>org.codehaus.swizzle</groupId>
      <artifactId>swizzle-confluence</artifactId>
      <version>1.1-20070908</version>
      <classifier>xwiki</classifier>
      <exclusions>
        <!-- We need to explicitely exclude JUnit since swizzle confluence depends transitively
             on Apache WS Common which wrongly defines a compile dependency on JUnit.
             See JIRA issue: http://jira.codehaus.org/browse/MEV-567 -->
        <exclusion>
          <groupId>junit</groupId>
          <artifactId>junit</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <!-- Standard dependencies found in the central repository -->

    <dependency>
      <groupId>velocity</groupId>
      <artifactId>velocity</artifactId>
      <version>1.5</version>
    </dependency>
    <dependency>
      <groupId>commons-logging</groupId>
      <artifactId>commons-logging</artifactId>
      <version>1.1.1</version>
    </dependency>
    <dependency>
      <groupId>commons-lang</groupId>
      <artifactId>commons-lang</artifactId>
      <version>2.1</version>
    </dependency>
    <dependency>
      <groupId>commons-collections</groupId>
      <artifactId>commons-collections</artifactId>
      <version>3.2</version>
    </dependency>
    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
      <version>1.2</version>
    </dependency>
    <dependency>
      <groupId>commons-net</groupId>
      <artifactId>commons-net</artifactId>
      <version>1.4.1</version>
    </dependency>
    <dependency>
      <groupId>dom4j</groupId>
      <artifactId>dom4j</artifactId>
      <version>1.6.1</version>
    </dependency>
    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate</artifactId>
      <version>3.2.5.ga</version>
    </dependency>
    <dependency>
      <groupId>commons-httpclient</groupId>
      <artifactId>commons-httpclient</artifactId>
      <version>3.1</version>
    </dependency>
    <dependency>
      <groupId>ecs</groupId>
      <artifactId>ecs</artifactId>
      <version>1.4.2</version>
    </dependency>
    <dependency>
      <groupId>xmlrpc</groupId>
      <artifactId>xmlrpc-server</artifactId>
      <version>3.0</version>
      <exclusions>
        <!-- We need to explicitely exclude JUnit since xmlrpc Server depends transitively
             on Apache WS Common which wrongly defines a compile dependency on JUnit.
             See JIRA issue: http://jira.codehaus.org/browse/MEV-567 -->
        <exclusion>
          <groupId>junit</groupId>
          <artifactId>junit</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>securityfilter</groupId>
      <artifactId>securityfilter</artifactId>
      <version>2.0</version>
    </dependency>
    <dependency>
      <groupId>portlet-api</groupId>
      <artifactId>portlet-api</artifactId>
      <version>1.0</version>
      <!-- TODO: Ideally the scope should be "provided". However before we can do this we'll need
           to fully remove all references to the Portlet API in XWiki Core so that using it in
           a Servlet environment will not fail with a ClassNotFoundException -->
    </dependency>
    <dependency>
      <groupId>struts</groupId>
      <artifactId>struts</artifactId>
      <version>1.2.9</version>
    </dependency>
    <dependency>
      <groupId>ant</groupId>
      <artifactId>ant</artifactId>
      <version>1.6.5</version>
    </dependency>
    <dependency>
      <groupId>javax.xml</groupId>
      <artifactId>jaxrpc-api</artifactId>
      <version>1.1</version>
    </dependency>
    <dependency>
      <groupId>commons-dbcp</groupId>
      <artifactId>commons-dbcp</artifactId>
      <version>1.2.1</version>
    </dependency>
    <dependency>
      <groupId>batik</groupId>
      <artifactId>batik-rasterizer</artifactId>
      <version>1.6</version>
    </dependency>
    <dependency>
      <groupId>batik</groupId>
      <artifactId>batik-svggen</artifactId>
      <version>1.6</version>
    </dependency>
    <dependency>
      <groupId>batik</groupId>
      <artifactId>batik-dom</artifactId>
      <version>1.6</version>
    </dependency>
    <dependency>
      <groupId>batik</groupId>
      <artifactId>batik-ext</artifactId>
      <version>1.6</version>
    </dependency>
    <dependency>
      <groupId>rome</groupId>
      <artifactId>rome</artifactId>
      <version>0.8</version>
    </dependency>
    <!-- NOte: in lib/ we're using 0.9.19M. We need to verfy if version 0.9.19 is ok to be used -->
    <dependency>
      <groupId>ical4j</groupId>
      <artifactId>ical4j</artifactId>
      <version>0.9.20</version>
    </dependency>
    <dependency>
      <groupId>javax.mail</groupId>
      <artifactId>mail</artifactId>
      <version>1.4</version>
    </dependency>
    <dependency>
      <groupId>groovy</groupId>
      <artifactId>groovy-all-1.0-jsr</artifactId>
      <version>06</version>
    </dependency>
    <dependency>
      <groupId>picocontainer</groupId>
      <artifactId>picocontainer</artifactId>
      <version>1.2</version>
    </dependency>
    <!-- This Axis dependency is not used directly and shouldn't be declared. However it's used
         by the Google API used in the Google Plugin API. It should be declared in that project's
         POM but it's not so we have to declare it in the meantime... -->
    <dependency>
      <groupId>org.apache.axis</groupId>
      <artifactId>axis</artifactId>
      <version>1.4</version>
    </dependency>
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>servlet-api</artifactId>
      <!-- Note: The 2.4 version is not technically correct as 2.4 corresponds to a specification
           # and is not an implementation version. The central repo would need to be fixed... -->
      <version>2.4</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.lucene</groupId>
      <artifactId>lucene-core</artifactId>
      <version>2.3.0</version>
    </dependency>
    <dependency>
      <groupId>pdfbox</groupId>
      <artifactId>pdfbox</artifactId>
      <version>0.7.1</version>
    </dependency>
    <dependency>
      <groupId>radeox</groupId>
      <artifactId>radeox</artifactId>
      <version>1.0-b2</version>
    </dependency>
    <dependency>
      <groupId>backport-util-concurrent</groupId>
      <artifactId>backport-util-concurrent</artifactId>
      <version>3.0</version>
    </dependency>
    <dependency>
      <groupId>commons-fileupload</groupId>
      <artifactId>commons-fileupload</artifactId>
      <version>1.1.1</version>
    </dependency>
    <dependency>
      <groupId>log4j</groupId>
      <artifactId>log4j</artifactId>
      <version>1.2.13</version>
    </dependency>
    <dependency>
      <groupId>oro</groupId>
      <artifactId>oro</artifactId>
      <version>2.0.8</version>
    </dependency>
    <dependency>
      <groupId>org.apache.xmlrpc</groupId>
      <artifactId>xmlrpc-common</artifactId>
      <version>3.0</version>
      <exclusions>
        <!-- We need to explicitely exclude JUnit since WS Common 1.0.1 used by XMLRPC Commons is
             having an invalid compile time dependency on it.
             See JIRA issue: http://jira.codehaus.org/browse/MEV-567 -->
        <exclusion>
          <groupId>junit</groupId>
          <artifactId>junit</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>commons-codec</groupId>
      <artifactId>commons-codec</artifactId>
      <version>1.3</version>
    </dependency>
    <dependency>
      <groupId>commons-beanutils</groupId>
      <artifactId>commons-beanutils</artifactId>
      <version>1.7.0</version>
    </dependency>
    <dependency>
      <groupId>xml-apis</groupId>
      <artifactId>xml-apis</artifactId>
      <version>1.3.04</version>
    </dependency>
    <dependency>
      <groupId>xml-apis</groupId>
      <artifactId>xmlParserAPIs</artifactId>
      <version>2.0.2</version>
    </dependency>
    <dependency>
      <groupId>xpp3</groupId>
      <artifactId>xpp3</artifactId>
      <version>1.1.3.4-RC8</version>
    </dependency>
    <dependency>
      <groupId>org.apache.xmlgraphics</groupId>
      <artifactId>xmlgraphics-commons</artifactId>
      <version>1.1</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.poi</groupId>
      <artifactId>poi</artifactId>
      <version>3.0-FINAL</version>
    </dependency>
    <dependency>
      <groupId>org.xwiki.platform</groupId>
      <artifactId>xwiki-core-component</artifactId>
      <version>${pom.version}</version>
    </dependency>
    <dependency>
      <groupId>org.xwiki.platform</groupId>
      <artifactId>xwiki-core-observation</artifactId>
      <version>${pom.version}</version>
    </dependency>
    <dependency>
      <groupId>org.xwiki.platform</groupId>
      <artifactId>xwiki-core-velocity</artifactId>
      <version>${pom.version}</version>
    </dependency>
    <dependency>
      <groupId>joda-time</groupId>
      <artifactId>joda-time</artifactId>
      <version>1.4</version>
    </dependency>
    <dependency>
      <groupId>org.apache.xmlgraphics</groupId>
      <artifactId>fop</artifactId>
      <version>0.93</version>
    </dependency>
    <!-- Needed for backward compatibility Aspects -->
    <dependency>
      <groupId>aspectj</groupId>
      <artifactId>aspectjrt</artifactId>
      <version>1.5.2a</version>
    </dependency>
    <dependency>
      <groupId>jmock</groupId>
      <artifactId>jmock</artifactId>
      <version>1.1.0</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>jmock</groupId>
      <artifactId>jmock-cglib</artifactId>
      <version>1.1.0</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.xwiki.platform</groupId>
      <artifactId>xwiki-core-plexus</artifactId>
      <version>${pom.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
  <build>
    <plugins>
      <!-- Apply Backward compatibility Aspects using the strategy described at
           http://blogs.sonatype.com/john/2007/11/09/1194630418546.html -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>aspectj-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>backward-compatibility-aspects</id>
            <goals>
              <goal>compile</goal>
            </goals>
            <configuration>
              <aspectDirectory>src/main/aspect/compatibility</aspectDirectory>
              <source>1.5</source>
              <target>1.5</target>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-javadoc-plugin</artifactId>
        <configuration>
          <!-- Generate Javadoc only for the Public API -->
          <subpackages>com.xpn.xwiki.api</subpackages>
        </configuration>
      </plugin>
      <plugin>
        <!-- Apply the Checkstyle configurations defined in the top level pom.xml file -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
        <dependencies>
          <dependency>
            <groupId>com.xpn.xwiki.platform.tools</groupId>
            <artifactId>xwiki-verification-resources</artifactId>
            <version>${platform.tool.verification.version}</version>
          </dependency>
        </dependencies>
        <configuration>
          <includes>
              **/api/Api.java,
              **/api/User.java,
              **/xmlrpc/ConfluenceRpcInterface,
              **/xmlrpc/Attachment.java,
              **/xmlrpc/SpaceSummary.java,
              **/ViewAction.java,
              **/ZipExplorer*.java,
              **/FileUpload*.java,
              **/PluginApi.java,
              **/content/**/*.java,
              **/XWikiMessageTool.java,
              **/XWikiListFilter.java,
              **/doc/rcs/*.java,
              **/api/RevisionInfo.java,
              **/web/DeleteVersionsForm.java,
              **/migration/**.java,
              **/*RecycleBin*.java,
              **/*DeletedDocument.java,
              **/UndeleteAction.java,
              **/rightsmanager/**/*.java
              **/plugin/ldap/XWikiLDAP*.java
          </includes>
          <excludes>
              **/RenamePageReplaceLinkHandler.java,
              <!-- these files are clean, but failed in checkstyle because http://jira.codehaus.org/browse/MCHECKSTYLE-54 : -->
              **/XWikiPatchUtils.java,
              **/XWikiRCSArchive.java,
              **/XWikiHibernateRecycleBinStore.java,
              **/migration/AbstractXWikiMigrationManager.java
          </excludes>
        </configuration>
      </plugin>
    </plugins>
  </build>
  <profiles>
    <profile>
      <!-- Use this profile to weave the Log Aspect to trace all method calls. This is useful for
           debugging XWiki, especially in the case when you cannot debug the application (for
           example when you cannot reproduce the problem on your machine you can send an
           aspectified XWiki JAR and ask the user to run it and send you the logs). As this logs
           everything you'll need to control what is logged by tuning the Log4J configuration file
           to log only what you want. -->
      <id>debug</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>aspectj-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>debug</id>
                <goals>
                  <goal>compile</goal>
                </goals>
                <configuration>
                  <configuration>
                    <aspectDirectory>src/main/aspect/debug</aspectDirectory>
                  </configuration>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>

