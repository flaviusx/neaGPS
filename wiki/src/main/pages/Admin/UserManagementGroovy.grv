/* Groovy Class #* */

import com.xpn.xwiki.api.XWiki
import javax.servlet.http.HttpServletRequest
import org.curriki.xwiki.plugin.curriki.CurrikiPluginApi
import org.curriki.xwiki.plugin.curriki.CurrikiPlugin
import org.slf4j.LoggerFactory
import org.slf4j.Logger
import com.xpn.xwiki.api.Document
import net.sf.json.JSONSerializer
import net.sf.json.JSONArray
import org.curriki.plugin.spacemanager.impl.CurrikiSpaceManagerExtension
import com.xpn.xwiki.api.Context

/**
 * User: Felix Tscheulin
 * Date: 9/21/12
 * Time: 12:01 PM
 */
public class UserManagementGroovy implements CurrikiPlugin.SolrResultCollector {

    /**
     * LOGGER
     */
    private static final Logger LOG = LoggerFactory.getLogger(UserManagementGroovy.class);

    /**
     * The Request of the velocity page containing the parameters such as the username
     */
    private HttpServletRequest request;

    /**
     * The xwiki object of the running curriki instance
     */
    private XWiki xwiki;

    /**
     * The interface to interact with the curriki api
     */
    private CurrikiPluginApi currikiPluginApi;

    /**
     * The context of the request
     */
    private Context context;

    /**
     * The results for the queries to solr to get the user information
     */
    private Map<String, Map<String, String>> foundUsers = new LinkedHashMap<String, Map<String, String>>();

    /**
     * A temporary map for a single user until it is added to the Map above
     */
    private Map<String, String> tmpUser = new LinkedHashMap<String, String>();

    /**
     * The maximum number of rows which are given to us by solr responses
     */
    private int maxRowsInSolrResponse = 25;

    /**
     * The current page number the user if viewing
     */
    private int currentPageNumber = 0;

    /**
     * The total numbre of solr result without paging
     */
    private int totalNumberOfSolrResults = 0;

    /**
     * The number of pages which are containing results (totalNumberOfSolrResults / maxRowsInSolrResponse)
     */
    private int totalNumberOfPages = 0;

    /**
     * If a status change of users is made this set keeps track of the activated ones
     */
    private Set<String> activatedUsers = new LinkedHashSet<String>();

    /**
     * If a status change of users is made this set keeps track of the deactivated ones
     */
    private Set<String> deactivatedUsers = new LinkedHashSet<String>();

    /**
     * If a status change of users is made this set keeps track of the inactivated ones
     */
    private Set<String> inactivatedUsers = new LinkedHashSet<String>();

    /**
     * If a status change of users is made this set keeps track of the deleted ones
     */
    private Set<String> deletedUsers = new LinkedHashSet<String>();

    /**
     * All warnings occurred while changing the state of a user are stored here so the view can show the messages to the user
     */
    private Set<Map<String, Object>> warnings = new LinkedHashSet<Map<String, Object>>();

    /**
     * All errors occurred while changing the state of a user are stored here so the view can show the messages to the user
     */
    private Set<String> errors = new LinkedHashSet<String>();

    public final String WARNING_USER_STILL_HAS_CONTRIBUTIONS = "WARNING_USER_STILL_HAS_CONTRIBUTIONS";
    public final String WARNING_USER_IS_SYSTEM_ADMIN = "WARNING_USER_IS_SYSTEM_ADMIN";
    public final String WARNING_USER_IS_GROUP_ADMIN = "WARNING_USER_IS_GROUP_ADMIN";
    public final String WARNING_USER_IS_YOURSELF = "WARNING_USER_IS_YOURSELF";


    /**
     * Needs to be called to initiate an instance of this class properly
     * @param request
     * @param xwiki
     */
    public void init(HttpServletRequest request, XWiki xwiki, Context context) {
        this.request = request;
        this.xwiki = xwiki;
        this.context = context;
        if (xwiki != null)
            this.currikiPluginApi = xwiki.curriki;
    }

    /**
     * This function processes all parameters received by any request to this site
     * calls the appropriate functions and sets the right attributes in this instance
     */
    public void processReceivedData(){
        if(request==null){LOG.error("Request to UserMangagement is null");return;}

        Map<String[],String> params = request.getParameterMap();

        if(params.containsKey("rows")){
            maxRowsInSolrResponse = Integer.valueOf(params.get("rows")[0]);
        }

        if(params.containsKey("pageNumber")){
            currentPageNumber = Integer.valueOf(params.get("pageNumber")[0]);
        }

        if(params.containsKey("usernames")){
            searchUserByName(params.get("usernames")[0]);
        }

        if(params.containsKey("applyStatusChanges")){
            applyStatusChanges();
        }

        computeTotalPageNumber();
    }



    /**
     * This method is called from the view to get the data about the found users to show
     * @return A Map of Maps with user names as keys on the first map level and user attributes on the second map level
     */
    public Map<String, Map<String, String>> getFoundUsers(){
        return foundUsers;
    }

    public int getTotalNumberOfSolrResults(){
        return totalNumberOfSolrResults;
    }

    public int getTotalNumberOfPages(){
        return totalNumberOfPages;
    }

    public Set<String> getActivatedUsers(){
        return activatedUsers;
    }

    public Set<String> getInactivatedUsers(){
        return inactivatedUsers;
    }

    public Set<String> getDeactivatedUsers(){
        return deactivatedUsers;
    }

    public Set<String> getDeletedUsers(){
        return deletedUsers;
    }

    public Set<Map <String, Object>> getWarnings(){
        return warnings;
    }

    public Set<String> getErrors(){
        return errors;
    }

    /**
     * Called to search users by name and fill the result map
     * a map of maps with all data needed for the view [username1: [useractive:"true", userFirstname:"first1", userLastname:"last1"], username2: [useractive:"false" ...], ...]
     * @param userNames the input of the user names in the form "username1, username2, username3"
     */
    private void searchUserByName(String userNames) {
        if(userNames == null || userNames.equals("")) return;
        try{
            String fields = "userName,userFirstName,userLastName,userActive,userEmailUndeliverable,userEmail,userContributions,userGroups";

            String queryString = "((userName:*" + userNames + "*)OR";
            queryString += "(userFirstName:*" + userNames + "*)OR";
            queryString += "(userLastName:*" + userNames + "*)OR";
            queryString += "(userEmail:*" + userNames + "*)";
            queryString += ")AND(type:user)";

            int start = (currentPageNumber-1)*maxRowsInSolrResponse;
            currikiPluginApi.solrCollectResultsFromQuery(queryString, fields, start, maxRowsInSolrResponse, this);
        }catch(Exception e){
            foundUsers = null;
            LOG.error("Error while searching for users, please enter the usernames properly.");
        }

        if (tmpUser != null && tmpUser.size() > 0)
            foundUsers.put(tmpUser.get("userName"), tmpUser);
    }

    /**
     *
     * Called from within a velocity page (UserManagement.vm) to retrieve the form data and do all needed work to update
     * the users status
     */
    private void applyStatusChanges() {
        Map<String, String> userStates = extractUserStatesFromParams();

        for (Map.Entry<String, String> entry : userStates.entrySet()) {
            String userName = entry.key;
            String userState = entry.value;

            Document userDoc = xwiki.getDocument("XWiki." + userName);
            if (userDoc == null){
                errors.add("Could not find UserDoc for user " + userName)
                continue;
            }

            def userObj = userDoc.getObject("XWiki.XWikiUsers");
            if(userObj == null) {
                errors.add("Could not find UserObj for user " + userName);
                continue;
            }

            boolean changedAUser = false;
            boolean deletedAUser = false;
            if (userState.equals("ACTIVE")) {
                changedAUser = activateUser(userObj);
                if(changedAUser) activatedUsers.add(userName);
            }
            else if (userState.equals("INACTIVE")) {
                changedAUser = inactivateUser(userObj);
                if(changedAUser) inactivatedUsers.add(userName);
            }
            else if (userState.equals("DEACTIVATED")) {
                changedAUser = deactivateUser(userObj);
                if(changedAUser) deactivatedUsers.add(userName);
            }
            else if (userState.equals("TO_DELETE")) {
                deletedAUser = deleteUser(userName);
                if(deletedAUser) deletedUsers.add(userName);
            }

            if(changedAUser && !deletedAUser){
                userDoc.saveWithProgrammingRights();
            }
        }
    }

    private void computeTotalPageNumber() {
        //calculate the number of pages for the view
        double result = totalNumberOfSolrResults / maxRowsInSolrResponse;
        if(result <= 1) {
            totalNumberOfPages = 1;
        } else{
            totalNumberOfPages = result+1;
        }
    }

    /**
     * This method processes the parameter list excluding all parameters which are not usernames and their state values.
     * @return  Map<String, Map<String, String>> a map of maps. The key for the outer maps are the user names and the inner key value pairs are representing the users state
     */
    private Map<String, String> extractUserStatesFromParams(){
        Map<String, String> params = request.getParameterMap();
        Map<String, String> userStates = new HashMap<String, String>();

        //Iterate over all parameters we have
        for (Map.Entry<String, String> entry : params.entrySet()) {

            //Extract the username from the key
            String key = entry.key;
            String userName = ""

            if(key.indexOf(".")!=-1)
                userName = key.substring(0, key.indexOf("."));

            //If the username was not read yet and we are at a username or state
            if (!key.contains("applyStatusChanges") && !key.contains("usernames") && !userName.equals("") &&!userStates.keySet().contains(userName)) {

                //Pull the userState directly from the params map
                String userState = params.get(userName + ".STATE")[0];
                userStates.put(userName, userState);
            }
        }
        return userStates;
    }

    /**
     * Changes the userObj to represent an active state
     * @param userObj the userObject of a XWiki User Doc which should be changed to active
     * @return true if a change was made false if the user was already in this state
     */
    private boolean activateUser(userObj){
        boolean hasChanged = false;
        if(!userObj.get("active").equals("Active")){
            userObj.set("active","1");
            hasChanged = true;
        }
        if(!userObj.get("email_undeliverable").equals("No")){
            userObj.set("email_undeliverable","0");
            hasChanged = true;
        }

        return hasChanged;
    }

    /**
     * Changes the userObj to represent an inactive state
     * @param userObj the userObject of a XWiki User Doc which should be changed to inactive
     * @return true if a change was made false if the user was already in this state
     */
    private boolean inactivateUser(userObj){
        boolean hasChanged = false;
        if(!userObj.get("active").equals("Inactive")){
            userObj.set("active","0");
            hasChanged = true;
        }
        if(!userObj.get("email_undeliverable").equals("Yes")){
            userObj.set("email_undeliverable","1");
            hasChanged = true;
        }
        return hasChanged;
    }

    /**
     * Changes the userObj to represent an deactivated state
     * @param userObj the userObject of a XWiki User Doc which should be changed to deactive
     * @return true if a change was made false if the user was already in this state
     */
    private boolean deactivateUser(userObj){
        boolean hasChanged = false;
        if(!userObj.get("active").equals("Inactive")){
            userObj.set("active","0");
            hasChanged = true;
        }
        if(!userObj.get("email_undeliverable").equals("No")){
            userObj.set("email_undeliverable","0");
            hasChanged = true;
        }
        return hasChanged;
    }

    private boolean deleteUser(String userName){
        boolean userFreeToDeletion = true;

        Map<String, String> userAttributes  = foundUsers.get(userName);
        String numberOfContributions = userAttributes.get("userContributions");

        if(Integer.valueOf(numberOfContributions) > 0){
            Map<String, Object> warningsForUser = new LinkedHashMap<String, Object>();
            warningsForUser.put("cause", WARNING_USER_STILL_HAS_CONTRIBUTIONS);
            warningsForUser.put("userName", userName);
            warningsForUser.put("numberOfContributions", numberOfContributions);
            warningsForUser.put("userResources", getUserResources(userName))
            warnings.add(warningsForUser);
            userFreeToDeletion = false;
        }

        List<String> groupNames = getGroupNamesFromSolrString(userName);
        if(groupNames.contains(CurrikiSpaceManagerExtension.LEADERS_GROUP_NAME)){
            Map<String, Object> warningsForUser = new LinkedHashMap<String, Object>();
            warningsForUser.put("cause", WARNING_USER_IS_SYSTEM_ADMIN);
            warningsForUser.put("userName", userName);
            warnings.add(warningsForUser);
            userFreeToDeletion = false;
        }

        List<String> groupNamesWhereUserIsAdmin = getGroupNamesWhereUserIsAdmin(userName, groupNames);
        if(groupNamesWhereUserIsAdmin.size() > 0){
            Map<String, Object> warningsForUser = new LinkedHashMap<String, Object>();
            warningsForUser.put("cause", WARNING_USER_IS_GROUP_ADMIN);
            warningsForUser.put("userName", userName);
            warningsForUser.put("groupNames", groupNamesWhereUserIsAdmin);
            warnings.add(warningsForUser);
            userFreeToDeletion = false;
        }

        if(("XWiki."+userName).equals(context.getUser())){
            Map<String, Object> warningsForUser = new LinkedHashMap<String, Object>();
            warningsForUser.put("cause", WARNING_USER_IS_YOURSELF);
            warningsForUser.put("userName", userName);
            warnings.add(warningsForUser);
            userFreeToDeletion = false;
        }

        if(userFreeToDeletion) {
            Document userDoc = xwiki.getDocument("XWiki." + userName);
            if (userDoc != null){
                userDoc.deleteWithProgrammingRights();
                return true;
            }
        } else{
            return false;
        }
    }

    private List<String> getGroupNamesWhereUserIsAdmin(String userName, List<String> groupNames){
        List <String> result  = new ArrayList<String>();
        for(groupName in groupNames){
            //Use the space manager to redirect that questions
            if(xwiki.csm.isAdmin(groupName, "XWiki."+userName)) {
                result.add(groupName);
            }
        }
        return result;
    }

    private List<String> getGroupNamesFromSolrString(String userName){
        List<String> result = new ArrayList();
        Map<String, String> userAttributes = foundUsers.get(userName);
        String userGroupsString = userAttributes.get("userGroups");
        if(userGroupsString != null){
            JSONArray groups = JSONSerializer.toJSON(userGroupsString);
            for(group in groups){
                String spaceName = group.getString("groupSpace");
                result.add(spaceName);
            }
        }
        return result;
    }

    private List<String> getUserResources(String userName){
        List results = xwiki.getXWiki().search("select doc.fullName from XWikiDocument doc, BaseObject obj where doc.creator='XWiki." + userName + "' and doc.name!='WebHome' and doc.name!='WebPreferences' and doc.name!='Favorites' and doc.space!='AssetTemp' and doc.space!='Coll_Templates' and obj.name=doc.fullName and obj.className='CurrikiCode.AssetClass'", context.getContext());
        return results;
    }

    /*
     *##############################################################################
     * SOLR RESULT COLLECTOR INTERFACE IMPLEMENTATION
     *##############################################################################
     */

    /**
     * We need to remember if we are already parsing a document of a user search.
     */
    private boolean isInDocument = false;

    @Override
    public void status(int statusCode, int qTime, int numFound, int start) {
        totalNumberOfSolrResults = numFound;
    }

    @Override
    public void addValue(String name, String value) {
        tmpUser.put(name, value);
    }

    @Override
    public void newDocument() {
        if (isInDocument) { //The first time we see a new document we don't push it to the map.
            if (tmpUser != null && tmpUser.size() > 0)
                foundUsers.put(tmpUser.get("userName"), tmpUser);

            tmpUser = new HashMap<String, String>();
        } else {
            isInDocument = true;
        }
    }
}