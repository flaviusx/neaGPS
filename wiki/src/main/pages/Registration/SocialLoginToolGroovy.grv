import org.brickred.socialauth.AuthProvider;
import org.brickred.socialauth.AuthProviderFactory;
import com.xpn.xwiki.api.XWiki;
import com.xpn.xwiki.api.Context
import javax.servlet.http.HttpServletResponse
import javax.servlet.http.HttpServletRequest
import com.xpn.xwiki.api.Document;
import com.xpn.xwiki.web.XWikiMessageTool
import org.apache.commons.logging.Log
import org.apache.commons.logging.LogFactory
import org.brickred.socialauth.Permission
import org.brickred.socialauth.Profile
import org.curriki.xwiki.plugin.curriki.CurrikiPluginApi
import com.xpn.xwiki.doc.XWikiAttachment;

public class SocialLoginToolGroovy {
    // the properties are static... it means they are loaded with the compilation of the groovy class
    private static Properties properties = null;

    private XWiki xwiki = null;
    private Context context = null;
    HttpServletRequest request = null;
    private XWikiMessageTool msg = null;
    private List errors = new ArrayList();
    String providerId = null;
    String city, country;
    String warningFields="", okFields="";
    String username, password, firstName, lastName, email, memberType, agree;
    String nowTarget = null;
    boolean hasReadProviderProfile = false;


    Log LOG = LogFactory.getLog("groovyPages.SocialLogin");

    public String init(XWiki xwiki, Context context, HttpServletRequest request, XWikiMessageTool msg) {
        this.xwiki= xwiki;
        this.context = context;
        this.request = request;
        this.msg = msg;
        if(properties==null) {
            properties = new Properties();
            properties.load(
                    request.getSession(true).getServletContext().
                            getResourceAsStream("/WEB-INF/oauth_consumer.properties"));
        }
        LOG.info("Initted");
        return "";
    }

    public void grabFrom(Object other1) {
        if(other1==null) return;
        if(!(other1 instanceof SocialLoginToolGroovy)) {
            System.out.println("tograb is not correct: \"" + other1 + "\" of class " + other1.getClass() );
            return;
        }
        SocialLoginToolGroovy other = other1;
        LOG.info("SocialLoginToolGroovy  grabbing from" + this + " being prepopulated from " + other);
        this.hasReadProviderProfile = other.hasReadProviderProfile
        this.firstName = other.firstName;
        this.lastName = other.lastName;
        this.agree = other.agree;
        this.city = other.city;
        this.country = other.country;
        this.memberType = other.memberType;
        this.password = other.password;
        this.providerId = other.providerId;
        this.username = other.username;


        this.errors = other.errors;
        this.warningFields = other.warningFields;
        this.okFields = other.okFields;
        this.nowTarget = other.nowTarget;
    }

    public String authenticateUser(Document userDoc) {
        try {
            System.out.println("Authenticating user " + userDoc);
            if(userDoc==null) return null;
            context.context.put("ajax",true);
            xwiki.checkAuth(userDoc.fullName, userDoc.get("XWiki.XWikiUsers").get("password").value, "false")
            nowTarget = request.session.getAttribute("xredirect");
            return "redirectOnTop";
            //def xwikiAuthenticator = xwiki.getXWiki().getAuthService(); //.@authenticators.get('xwiki')
            //def psm = xwikiAuthenticator.@persistentLoginManager;
            // psm.rememberLogin(request, response, userDoc.fullName, password)
            //xwikiAuthenticator.authenticate(userDoc.fullName, password, context.context);
            //xwiki.getXWiki().getAuthService().authenticate(userDoc.fullName, password, context.context)
        } catch (Exception ex) {
            System.err.println("Trouble at authenticating: " + ex);
            ex.printStackTrace();
            errors.add(msg.get('xwiki.socialLogin.genericError', [ex.message]));
            return "error";
        };
    }

    public List getErrors() {
        return errors;
    }

    /**
     * Initiate the OAuth dance with the requested provider
     */
    public String bounceToProvider(HttpServletResponse response) {
        try {
            System.out.println("Bouncing to Provider " + request.provider);
            AuthProvider provider = AuthProviderFactory.getInstance(request.provider, properties);
            //println provider; // ???
            String maybeRedirect = request.getParameter("xredirect");
            if(maybeRedirect!=null && maybeRedirect.length()>0)
                maybeRedirect = "&xredirect=" +request.getParameter("xredirect");
                else maybeRedirect = "";
            String maybeXpage="";
            if(request.framed=="true") maybeXpage="&xpage=popup";
            String targetUrl = "http://" + xwiki.xWiki.Param('curriki.system.hostname', 'broken-url') +"/xwiki/bin" +
                    request.getPathInfo()  + '?callback=1' +maybeXpage; //+ maybeRedirect ;
            if("facebook".equalsIgnoreCase(request.provider)) {
                targetUrl = URLEncoder.encode(targetUrl);
                provider.setPermission(Permission.AUHTHENTICATE_ONLY);
            }
            String url = provider.getLoginRedirectURL(targetUrl);
            System.out.println("Redirecting to " + url);

            // Store in session
            request.session.setAttribute("org.brickred.socialauth.AuthProvider", provider);
            request.session.setAttribute("org.brickred.socialauth.AuthProvider.hint", request.provider);
            response.sendRedirect(url);
            return "nothing";
        } catch (Exception ex) {
            ex.printStackTrace();
            errors.add(msg.get('registration.genericError', [ex.message]));
            return "error";
        };
    }

    /**
     * We've got a response from the provider, let's treat it
     */
    public String processAuthReturn() {

        try {
            // get the provider back from session
            AuthProvider providerObj = request.session.getAttribute("org.brickred.socialauth.AuthProvider");
            this.providerId = request.session.getAttribute("org.brickred.socialauth.AuthProvider.hint");
            LOG.info("Welcoming from provider " + providerId);

            // verify the authentication
            System.err.println("Verifying " + providerObj + " for provider " + providerId);
            def profile = providerObj.verifyResponse(request);

            // Search for this profile id in database, find user
            String query =", BaseObject userObj, BaseObject socialLoginObj, StringProperty provider, StringProperty profileId where " +
                    " userObj.className='XWiki.XWikiUsers' and doc.fullName=userObj.name " +
                    " and socialLoginObj.className='XWiki.SocialLoginProfileClass' and " +
                    " doc.fullName=socialLoginObj.name and " +
                    " provider.id.id = socialLoginObj.id and profileId.id.id = socialLoginObj.id and " +
                    " provider.name='provider' and profileId.name='validatedId' and provider.value='"+providerId+"' and profileId.value='"+profile.validatedId+"'";
            System.out.println("Querying: " + query);
            List userDocs = xwiki.searchDocuments(query,30,0);
            //original: XWQL: from doc.object(XWiki.XWikiUsers) as user, doc.object(XWiki.SocialLoginProfileClass) as profile where profile.provider = '""" + provider + "' and profile.validatedId = '" + profile.validatedId + "'")

            System.out.println("Found userDocs: " + userDocs);
            for (result in userDocs) {
                if(result==null) continue;
                System.out.println("Doc: " + result + " of class " + result.getClass());
                authenticateUser(xwiki.getDocument(result))
            }

            if(userDocs==null || userDocs.isEmpty()) {
                // Not authenticated/redirected yet ? -> You must be new here
                // You will have to pick-up a username and dad will create an account for you

                // Store the social profile in the session
                request.session.setAttribute("org.brickred.socialauth.Profile", profile);
                LOG.warn("Received from " + providerId + " profile " + profile + ".");


                readProviderProfile();

                // take to the display of the form to create the username
                nowTarget = "/xwiki/bin/view/Registration/SocialLogin?xpage=popup&xaction=creationForm"
                return "redirectInDialog";
            } else {
                // final step, login worked, existing user
                nowTarget = request.getSession().getAttribute("xredirect");
                System.out.println("Redirecting to " + nowTarget + " through a redirectOnTop");
                return "redirectOnTop";
            }

        } catch (Exception ex) {
            ex.printStackTrace();
            errors.add(msg.get('xwiki.socialLogin.genericError', [ex.message]));
            return "error";
        };
    }


    public void readProviderProfile() {
        if(hasReadProviderProfile) return;
        hasReadProviderProfile = true;
        Profile profile = request.session.getAttribute("org.brickred.socialauth.Profile");
        providerId = request.session.getAttribute("org.brickred.socialauth.AuthProvider.hint");
        firstName = profile.getFirstName();
        lastName = profile.getLastName();
        email = profile.getEmail();
        city = profile.location;
        country  = profile.country;

        username = profile.displayName;
        if(username==null || username=='') {
            int p = email.indexOf('@');
            username = email.substring(0,p);
            if(!isValidUsername(username, false)) {
                int i=0;
                while(i<20) {
                    if(isValidUsername(username + i, false)) break
                }
                username = username +i;
            }
        }
    }


    /**
     * Create a new user profile from the social profile result
     */
    public String tryCreateNewProfile() {
        Profile profile = request.session.getAttribute("org.brickred.socialauth.Profile")
        String provider = request.session.getAttribute("org.brickred.socialauth.AuthProvider.hint");
        LOG.info("Trying to create new profile from provider " + provider);
        

        username = request.username;
        firstName = profile.firstName;
        lastName = profile.lastName;
        email = profile.email;
        city = profile.location;
        country = profile.country;
        password = request.password;
        memberType = request.getParameter("member_type");
        if(memberType==null) memberType="-";

        boolean passed =  isValidUsername(username, true);
        passed = passed & isValidEmail(email, true);
        passed = passed & isValidPassword(password, true);
        passed = passed & isValidMemberType(memberType, true);
        passed = passed & isValidAgree(request.agree, true);
        passed = passed & isValidFirstName(firstName, true);
        passed = passed & isValidLastName(lastName, true);


        if (passed) {
            // Everything clear, let's proceed

            def propMap = new HashMap();
            propMap.put("active", "1")
            propMap.put("email", profile.email)
            propMap.put("first_name", profile.firstName)
            propMap.put("last_name", profile.lastName)
            propMap.put("password", password)
            System.out.println("Obtained record: " + profile.properties)

            //request.getParameterMap().put("xwikiname",userDocName);
            //request.getParameterMap().put("XWiki.XWikiUsers_0_password",password);

            def userDoc = new Document(xwiki.xWiki.getDocument("XWiki.${username}", context.context), context.context);
            userDoc.addObjectFromRequest("XWiki.XWikiUsers"); // TODO: use other explicit values ??
            def userObj = userDoc.getObject("XWiki.XWikiUsers");
            userObj.set("password",   password);
            userObj.set("first_name", firstName);
            userObj.set("last_name",  lastName);
            userObj.set("email",      email);
            userObj.set("city",       city);
            userObj.set('country',    country);

            userObj.set("active", "1");
            userObj.set("email_undeliverable", "0");
            userObj.set("show_contact","2"); // Show Your Profile:
            userObj.set("opt_out", 0); //

            //userDoc.addAttachments("xxx xx?");

            // other fields? language?
            String language = profile.language;
            if(!language)
                language = context.language;
            Locale locale = new Locale(language);
            userObj.set("language",    locale.getISO3Language());

            /* def validkey = xwiki.xWiki.generateValidationKey(16);
            userObj.set("validkey", validkey);
            userObj.set("validredirect", request.xredirect); */

            //userdoc.setParent("XWiki.XWikiUsers");
            userDoc.setContent('#include' + 'Form("XWiki.XWikiUserSheet")');
            userDoc.getDoc().setCreator(userDoc.getFullName());
            userDoc.getDoc().setAuthor(userDoc.getFullName());

            // set rights correct (I edit, others view)
            def rightobj = userDoc.newObject("XWiki.XWikiRights");
            rightobj.set("users", new String("${username}"));
            rightobj.set("allow", new String("1"));
            rightobj.set("levels", new String("edit"));
            rightobj.set("groups", new String(""));

            // add a socialLogin profile... discuss this one!
            def socialProfile = userDoc.getObject('XWiki.SocialLoginProfileClass', true)
            // TODO: remove these properties
            socialProfile.set('provider', provider)
            socialProfile.set('fullName', profile.fullName)
            socialProfile.set('firstName', profile.firstName)
            socialProfile.set('lastName', profile.lastName)
            socialProfile.set('displayName', profile.displayName)
            socialProfile.set('email', profile.email)
            socialProfile.set('profileImageURL', profile.profileImageURL)
            socialProfile.set('gender', profile.gender)
            socialProfile.set('dob', profile.dob)
            socialProfile.set('validatedId', profile.validatedId)
            socialProfile.set('country', profile.country)
            socialProfile.set('location', profile.location)

            def socialPrefs = userDoc.getObject('XWiki.SocialLoginClass', true)
            //socialPrefs.set('password_cache', password)
            socialPrefs.set('preferred_provider', provider)

            userDoc.saveWithProgrammingRights(msg.get('xwiki.socialLogin.updatedSocialProfile'), true)

            addProfilePictureFromAttachment(profile.profileImageURL, userDoc);

            System.out.println("New profile created and saved: " + userDoc);
            return authenticateUser(userDoc)
        }
        else {
            System.out.println("New profile not created.");
            if (!username || username == '')
                errors.add(msg.get('join.error.unsername'));
            else if (xwiki.exists('XWiki.' + username))
                errors.add(msg.get('join.error.login_not_unique'));
            if(!errors.isEmpty())
                return "creationForm";
            else return null;
        }
    }

    /* public String acceptLoginAndRedirect() {
        String xredirect = request.session.getAttribute("xredirect");
        if(xredirect==null || xredirect=="") xredirect = request.getParameter("xredirect");
        if(xredirect==null || xredirect=="") xredirect = "/xwiki/bin/view/" + context.user.replaceAll("\\.","/");
            request.session.setAttribute("xredirect", xredirect);
        nowTarget = xredirect;
        return "redirectOnTop";
    } */

    public String getApplicationApiKey(String provider) {
        provider = provider.toLowerCase();
        if("facebook"==provider)
            return properties.getProperty("graph.facebook.com.consumer_key");
        else if("google"==provider)
            return properties.getProperty("www.google.com.consumer_key");
        else if("yahoo"==provider)
            return properties.getProperty("api.login.yahoo.com.consumer_key");
        else if("twitter"==provider)
            return properties.getProperty("twitter.com.consumer_key");
        else throw new IllegalArgumentException("Unknown provider \"" + provider + "\".");
    }


    public String action(HttpServletRequest request) {
        String a = this.actionHere(request);
        LOG.info("Action: " + a);
        System.out.println("Action: " + a);
        return a;
    }



    public boolean isValidUsername(String account, boolean echoErrors) {
        if (!account.equals("") && account.replaceAll("[a-zA-Z0-9]","").equals("")) {
            if (xwiki.exists("XWiki.${account}") || "superadmin".equals("${account}")) {
                if(echoErrors) {
                    errors.add(msg.get("join.error.login_not_unique"));
                    warningFields += ", username";
                }
                return false;
            } else {
                okFields += ", username";
                return true;
            }
        }
        else {
            warningFields += ", username";
            if(echoErrors) errors.add(msg.get("join.error.unsername"));
            return false;
        }
    }

    public boolean isValidEmail(String email, boolean echoErrors) {
        if("paul@hoplahup.net"==email || "polx@i2geo.net"==email || "paul@activemath.org"==email) return true;
        def atIndex = email.indexOf("@");

        def query = ",BaseObject as obj, StringProperty as prop where doc.fullName=obj.name and obj.className='XWiki.XWikiUsers' and obj.id=prop.id.id and prop.id.name='email' and prop.value='"+email+"'";

        // Check to see if the email address is already used
        if (xwiki.searchDocuments(query).size() > 0) {
            warningFields += ", email";
            errors.add(msg.get("join.error.email_not_unique"));
            return false;
        }

        // We should make this a bit better...
        if (echoErrors && (atIndex < 1) || (email.lastIndexOf(".") <= (atIndex+1)) || (email.length() <= (email.lastIndexOf(".") + 1)) || (email.lastIndexOf("@") != atIndex) || !email.matches("[a-zA-Z0-9_+=\\.-]+@([a-zA-Z0-9-]+[\\.])+([a-zA-Z]){2,4}")) {
            errors.add(msg.get("join.error.email_invalid"));
            warningFields += ", email";
            return false;
        }
        okFields += ", email";
        return true;
    }

    public boolean isValidPassword(String ps, boolean echoErrors ) {
        if(ps!=null && ps.length()>4 && !ps.contains(" ")) {
            okFields += ", password";
            return true
        };
        if(echoErrors)
            errors.add(msg.get("join.error.password_invalid"));
        warningFields += ", password";
        return false;
    }

    public boolean isValidFirstName(String name, boolean echoErrors) {
        if(name!=null && name.length()<32 ) {
            okFields += ", first_name";
            return true
        };
        if(echoErrors)
            errors.add(msg.get("join.error.fname1_long"));
        warningFields += ", first_name";
        return false;
    }

    public boolean isValidLastName(String name, boolean echoErrors) {
        if(name!=null && name.length()<32 ) {
            okFields += ", last_name";
            return true
        };
        if(echoErrors)
            errors.add(msg.get("join.error.lname1_long"));
        warningFields += ", last_name";
        return false;
    }

    public boolean isValidMemberType(String ps, boolean echoErrors) {
        if(ps!=null && ps.length()>4 && !ps.contains(" ")) {
            okFields += ", memberType";
            return true
        };
        if(echoErrors)
            errors.add(msg.get("join.error.membership_type"));
        warningFields += ", memberType";
        return false;
    }

    public boolean isValidAgree(String ag, boolean echoErrors) {
        if(ag!=null &&
                (ag.equalsIgnoreCase("on") || ag.equalsIgnoreCase("true") || ag.equalsIgnoreCase("checked"))) {
            okFields += ", agree";
            return true;
        };
        if(echoErrors)
            errors.add(msg.get("join.error.policy"));
        warningFields += ", agree";
        return false;
    }


    public String actionHere(HttpServletRequest request) {
        if(!request.callback && request.provider) {
            return "bounceToProvider";
        }
        else if (request.callback){
            return "processAuthReturn";
        } else if(request.xaction && request.xaction=='creationForm')
            return "creationForm";
        else if (request.xaction && request.xaction == 'createProfile') {
            return "createNewProfile";
        }
        else {
            return "nothingToDo";
        }
    }

    public String getRedirectTarget() {
        String xredirect = null;
        if(request.session) xredirect = request.session.getAttribute("xredirect");
        if(xredirect==null) {
            if(context.user!="XWiki.XWikiGuest")
                xredirect="/xwiki/bin/view/MyCurriki/";
            else
                xredirect="/";
        }
        System.out.println("xredirect is " + xredirect);
        request.session.removeAttribute("xredirect");
        return xredirect;
    }

    public void addProfilePictureFromAttachment(String url, Document userDoc) {
        try {
            URL u = new URL(url)
            String name=u.getPath()
            if(name.contains("/")) {
                if(name.endsWith("/") && name.length()>1)
                    name = name.substring(0, name.length()-1);
                name = name.substring(name.lastIndexOf("/")+1);
            }
            XWikiAttachment attachment = userDoc.document.getAttachment(name)
            if (attachment == null) {
                attachment = new XWikiAttachment();
                userDoc.document.getAttachmentList().add(attachment);
            }
            InputStream inS = u.openStream()
            ByteArrayOutputStream bout = new ByteArrayOutputStream()
            int r=0
            while((r=inS.read())!=-1) { bout.write((byte) r);}
            attachment.setContent(bout.toByteArray())
            attachment.setFilename(name)
            attachment.setAuthor(context.user)
            attachment.setDoc(userDoc.document)
            userDoc.document.saveAllAttachments(context.context)
            def userObj = userDoc.getObject("XWiki.XWikiUsers")
            userObj.set("avatar",name)
        } catch (Exception ex) {
            LOG.warn("Couldn't write profile picture.",ex);
        };

    }

    public String getNowTarget() {
        return nowTarget;
    }


}