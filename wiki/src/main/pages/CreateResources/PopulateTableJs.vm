{pre}
var grids=[]; // table
// ------------------------------------ extend extjs ------------------------------------
Ext.apply(Ext.grid.GridView.prototype,{
    // remove red triangles
  doRender : function(cs, rs, ds, startRow, colCount, stripe){
    var ts = this.templates, ct = ts.cell, rt = ts.row, last = colCount-1;
    var tstyle = 'width:'+this.getTotalWidth()+';';
    var buf = [], cb, c, p = {}, rp = {tstyle: tstyle}, r;
    for(var j = 0, len = rs.length; j < len; j++){
      r = rs[j]; cb = [];
      var rowIndex = (j+startRow);
      for(var i = 0; i < colCount; i++){
        c = cs[i];
        p.id = c.id;
        p.css = i == 0 ? 'x-grid3-cell-first ' : (i == last ? 'x-grid3-cell-last ' : '');
        p.attr = p.cellAttr = "";
        p.value = c.renderer(r.data[c.name], p, r, rowIndex, i, ds);
        p.style = c.style;
        if(p.value == undefined || p.value === "") p.value = "&#160;";
        cb[cb.length] = ct.apply(p);
      }
      var alt = [];
      if(stripe && ((rowIndex+1) % 2 == 0)){
        alt[0] = "x-grid3-row-alt";
      }
      if(r.dirty){
        alt[1] = " x-grid3-dirty-row";
      }
      rp.cols = colCount;
      if(this.getRowClass){
        alt[2] = this.getRowClass(r, rowIndex, rp, ds);
      }
      rp.alt = alt.join(" ");
      rp.cells = cb.join("");
      buf[buf.length] =  rt.apply(rp);
    }
    return buf.join("");
  },
  focusCell : function(row, col, hscroll){
    row = Math.min(row, Math.max(0, this.getRows().length-1));
    var xy = this.ensureVisible(row, col, hscroll);
    this.focusEl.setXY(xy||this.scroller.getXY());
    if(Ext.isGecko){
     // this.focusEl.focus();
    }else{
     // this.focusEl.focus.defer(1, this.focusEl);
    }
  },
  // private
  layout : function(){
    if(!this.mainBody){
      return; // not rendered
    }
    var g = this.grid;
    var c = g.getGridEl();
    var csize = c.getSize(true);
    var vw = csize.width;
    if(vw < 20 || csize.height < 20){ // display: none?
      return;
    }
    if(g.autoHeight){
      this.scroller.dom.style.overflow = 'hidden';
    }else{
      this.el.setSize(csize.width, csize.height);
      var hdHeight = this.mainHd.getHeight();
      var vh = csize.height - (hdHeight);
      this.scroller.setSize(vw, vh);
      if(this.innerHd){
        this.innerHd.style.width = (vw)+'px';
      }
    }
    if(this.forceFit){
      if(this.lastViewWidth != vw){
        this.fitColumns(false, false);
        this.lastViewWidth = vw;
      }
    }else{
      this.autoExpand();
      this.syncHeaderScroll();
    }
    this.onLayout(vw, vh);
  }
});
Ext.apply(Ext.grid.EditorGridPanel.prototype,{
  // multi-lines wrapper and clear default value
  preEditValue : function(r, field){
    var value = r.data[field];
    if(!r.dirty||(r.dirty && typeof r.modified[field] == 'undefined')){
      value='';
    }else if(typeof value == 'string'){
      value=value.replace(/<br\/>/gi,'\r\n');
      value=this.autoEncode ? Ext.util.Format.htmlDecode(value) : value;
    }
    return value;
  },
  postEditValue : function(value, originalValue, r, field){
    if(typeof value == 'string'){
      value=this.autoEncode ? Ext.util.Format.htmlEncode(value) : value;
      value=value.replace(/\r\n/gi,"<br/>").replace(/\n/gi,'<br/>');
    }
    delete Ext.currentCellNode;
    return value;
  }
});
Ext.apply(Ext.grid.GridEditor.prototype, {
  // set auto size
  autoSize: true,
  doAutoSize : function(){
    if(this.autoSize){
      var parentNode=this.boundEl.dom.parentNode;
      var width=parentNode.clientWidth;
      var height=parentNode.clientHeight;
      switch(this.autoSize){
        case "width":
          this.setSize(width,  "");
          break;
        case "height":
          this.setSize("",  height-1);
        break;
        default:
            this.setSize(width,  height-1);
      }
      Ext.currentCellNode=parentNode;
    }
  }
});
Ext.apply(Ext.form.TextArea.prototype, {
    // auto size cell
  onKeyUpBuffered : function(e){
      if(!e.isNavKeyPress()||e.getKey()==e.ENTER){
        this.autoSize();
      } else if (e.isNavKeyPress()) {
        var index=this.gridIndex;
        if (grids[index].isJumpToNext) {
          grids[index].clickTabToNextNum = grids[index].clickTabToNextNum + 1;
          if (grids[index].clickTabToNextNum == 2) {
            grids[index].isJumpToNext = false;
            grids[index].clickTabToNextNum = 0;
            document.getElementById(grid_config[index].nextEl).focus();
          }
        } else if (grids[index].isJumpToPre) {
          grids[index].clickTabToPreNum = grids[index].clickTabToPreNum + 1;
          if (grids[index].clickTabToPreNum == 2) {
            grids[index].isJumpToPre = false;
            grids[index].clickTabToPreNum = 0;
            document.getElementById(grid_config[index].preEl).focus();
          }
        }
      }
  },
  autoSize : function(){
    if(!this.grow || !this.textSizeEl){
      return;
    }
    var el = this.el;
    var v = el.dom.value;
    var ts = this.textSizeEl;
    ts.innerHTML = '';
    ts.appendChild(document.createTextNode(v));
    v = ts.innerHTML;
    Ext.fly(ts).setWidth(this.el.getWidth());
    if(v.length < 1){
      v = "&#160;&#160;";
    }else{
      if(Ext.isIE){
        v = v.replace(/\n/g, '<p>&#160;</p>');
      }
      v += this.growAppend;
    }
    ts.innerHTML = v;
    var h = Math.min(this.growMax, Math.max(ts.offsetHeight, this.growMin)+this.growPad);
    if(h != this.lastHeight){
      if(Ext.currentCellNode){
        if(h>Ext.currentCellNode.clientHeight){
          this.lastHeight = h;
          this.el.setHeight(h);
          this.fireEvent("autosize", this, h);
          if(Ext.isIE){
            Ext.currentCellNode.style.height=h;
          }else{
            Ext.currentCellNode.setStyle('height:'+h+'px');
          }
        }
      }else{
        this.lastHeight = h;
        this.el.setHeight(h);
        this.fireEvent("autosize", this, h);
      }
    }
  }
});
// ------------------------------------ edit grid definition ------------------------------------
function cellClick(obj, row, col, e){
  var record = obj.store.getAt(row);
  var index=obj.store.gridIndex;
  var config=grid_config[index];
  var column=config.columns[col];
  if(row>=0&&row<config.data.length&&config.data[row][column]!=''&&record.get(column)==config.data[row][column]){
    record.set(column, '');
  }
}
function afterEdit(obj, row, col, e){
//    var r=obj.record;
//    var id=r.get("id");
//    var name=r.get("name");
}
// insert new row
function addrow(index){
  grids[index].store.loadData([{id:1}], true);
  return false;
}
function checkTableText(index){
  var arr = grids[index].store.data;
  var config = grid_config[index];
  for(i=0;i<arr.length;i++){
    var record = grids[index].store.getAt(i);
    for(var j=0;j<config.columns.length;j++){
      if(record.get(config.columns[j])!=''){
        return true;
      }
    }
  }
  return false;
}   
function formatTableString(str){
  str = str.replace(/<br\/>/gi,'\r\n');
  str = Ext.util.Format.htmlDecode(str);
  str = formatString(str, /#/g, "&#35;");
  str = formatString(str, /1/g, "&#49;");
  str = formatString(str, /\*/g, "&#42;");
  str = formatString(str, /a/g, "&#97;");
  str = formatString(str, /A/g, "&#65;");
  str = formatString(str, /i/g, "&#105;");
  str = formatString(str, /I/g, "&#73;");
  str = formatString(str, /g/g, "&#103;");
  str = formatString(str, /h/g, "&#104;");
  str = formatString(str, /k/g, "&#107;");
  str = formatString(str, /_/g, "&#95;");
  str = formatString(str, /~/g, "&#126;");
  str = formatString(str, /-/g, "&#45;");
  str = formatString(str, /{/g, "&#123;");
  str = formatString(str, /}/g, "&#125;");
  str = formatString(str, /\(/g, "&#40;");
  str = formatString(str, /\)/g, "&#41;");
  str = formatString(str, /\|/g, "&#124;");
  str = formatString(str, /\$/g, "&#36;");
  str = formatString(str, /@/g, "&#64;");
  str = formatString(str, /\[/g, "&#91;");
  str = formatString(str, /\]/g, "&#93;");
  str = formatString(str, /</g, "&#60;");
  str = formatString(str, />/g, "&#62;");
  str = str.replace(/\r\n/gi,"\\\\")
  return str;
}
function formatString(str, reg, repls){
  return str.replace(reg, repls)
}
function getTableText(index){
  var str = '\{table\}';
  var config=grid_config[index];
  var header='';
  for(var i=0;i<config.columns.length;i++){
    if(header!=''){
      header+=' | ';
    }
    header+=config.header[i];
  }
  str+=header+' \r\n';
  var arr = grids[index].store.data;
  for(i=0;i<arr.length;i++){
    var empty_row=true;
    var line='';
    var record = grids[index].store.getAt(i);
    for(var j=0;j<config.columns.length;j++){
      var value=formatTableString(record.get(config.columns[j]));
      if(value!=''){
        empty_row=false;
      }
      if(line!=''){
        line+=' | ';
      }
      line+=(value==''?'&#160;':value);
    }
    if(!empty_row){
      str += line + ' \r\n';
    }
  }
  str += '\{table\}';
  return str;
}

function initGrid(index){
	var config=grid_config[index];
	var cm_configs=[];
	var data_fields=[];
	data_fields.push('id');
	var tooltip = '<img class="tooltip" alt="" src="/xwiki/skins/curriki8/icons/exclamation.png" ext:qtip="{{0}}"/>';
	for(var i=0;i<config.columns.length;i++){
		var cm_config={};
		cm_config.id=i.toString();
		cm_config.header=config.header[i];
		if(config.tooltip[i]!=''){
			cm_config.header+=tooltip.replace(/\{\{0\}\}/g,config.tooltip[i]);
		}
		cm_config.dataIndex=config.columns[i];
		cm_config.sortable=false;
		cm_config.fixed=true;
		cm_config.width=config.width[i];
		cm_config.menuDisabled=true;
		cm_config.editor=new Ext.form.TextArea({gridIndex:index,grow:true,fieldClass:'x-form-field-ace'});
		cm_configs.push(cm_config);
		data_fields.push(config.columns[i]);
	}

	grids[index] = new Ext.grid.EditorGridPanel({
		renderTo:grid_config[index].renderTo,
		title:"",
		height:200,
		width:570,
		cm:new Ext.grid.ColumnModel(cm_configs),
		store:new Ext.data.JsonStore({gridIndex:index,data:grid_config[index].data,fields:data_fields}),
		autoExpandColumn:1,
		clicksToEdit:1,
		autoHeight:true,
		autoEncode:true,
		cls :' x-form-field-ace;',
		viewConfig: {scrollOffset: 2},
		fitContainer: true
	});
	grids[index].clickTabToNextNum=0;
	grids[index].clickTabToPreNum=0;
	grids[index].clickTabInGridToNextNum=0;
	grids[index].clickTabInGridToPreNum=0;
	grids[index].on("cellclick", this.cellClick);
	grids[index].on("afteredit",this.afterEdit,this);
	grids[index].addListener("keyDown", function(e){
		if (e.isNavKeyPress()) {
			if (grids[index].isJumpToNext) {
				grids[index].clickTabInGridToNextNum = grids[index].clickTabInGridToNextNum + 1;
				if (grids[index].clickTabInGridToNextNum == 2) {
					grids[index].isJumpToNext = false;
					grids[index].clickTabInGridToNextNum = 0;
					document.getElementById("addRowBtn_0").focus();
				}
			}
			else if (grids[index].isJumpToPre) {
				grids[index].clickTabInGridToPreNum = grids[index].clickTabInGridToPreNum + 1;
				if (grids[index].clickTabInGridToPreNum == 2) {
					grids[index].isJumpToPre = false;
					grids[index].clickTabInGridToPreNum = 0;
					document.getElementById('nlp_essential_question').focus();
				}
			}
		} 
	});
	grids[index].getSelectionModel().on("cellselect", function(sel, row, col) {
		curRow = row;curCol = col;
		if (row !=0 && col !=0 && row == grids[index].getStore().getCount()-1 && col == grids[index].getColumnModel().getColumnCount()-1) {
			grids[index].isJumpToNext = true;
		}
		else {
			grids[index].isJumpToNext = false;
		}
		if (row == 0 && col == 0) {
			grids[index].isJumpToPre = true;
		}
		else {
			grids[index].isJumpToPre = false;
		}
	});
}

Ext.onReady(function(){
	for(var i=0;i<grid_config.length;i++){
		initGrid(i);
	}
});
{/pre}
